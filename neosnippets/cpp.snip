include c.snip

snippet     tpl
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
options     head
abbr        class {}
    class ${1:#:name}
    {
        ${2}
    }; // class: $1

snippet     cclass
options     head
abbr        class {}
    class ${1:#:name}
    {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3)
    {
        ${0:TARGET}
    } // class: $1

snippet     try
options     head
abbr        try catch
    try
    {
        ${1:#:TARGET}
    } // try
    catch (${2:...})
    {
        ${3}
    } // catch: $1

# range based for ( C++11 feature )
snippet     foreach
options     head
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container})
    {
        ${0:TARGET}
    } // for $3

# lambda expression ( C++11 feature )
snippet     alamb
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

snippet     lamb
abbr        [](){}
    auto ${1:VAR} = [${2}](${3})${4}{ ${5:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
options     head
abbr        enum struct {};
    enum struct ${1:#:name}
    {
      ${2:#:TARGET}
    } $1;

# static assert ( C++11 feature )
snippet     sa
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

options     head
snippet     ns
abbr        namespace {}
    namespace ${1:#:name}
    {
        ${0:TARGET}
    } // namespace $1

snippet     sc
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     rc
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     cc
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dc
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     main
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     print
options     head
  std::cout << ${1:TARGET} << std::endl; ${0}
